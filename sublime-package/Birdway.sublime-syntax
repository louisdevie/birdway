%YAML 1.2
---
file_extensions:
  - bw
scope: source.birdway
contexts:
  main:
    - match: "'"
      scope: punctuation.definition.string.begin.birdway
      push: single_quoted_string

    - match: '"'
      scope: punctuation.definition.string.begin.birdway
      push: double_quoted_string

    - match: '/:'
      scope: punctuation.definition.comment.birdway
      push: line_comment

    - match: '/\*'
      scope: punctuation.definition.comment.begin.birdway
      push: block_comment

    - match: \blogerr\b
      scope: support.function.birdway

    - match: '\b(if|else|then)\b'
      scope: keyword.control.conditional.birdway

    - match: '\b(for|while|in|do)\b'
      scope: keyword.control.loop.birdway

    - match: '\b(meta|param|run|option|use)\b'
      scope: keyword.other.birdway

    - match: '\b(try|on)\b'
      scope: keyword.control.exception.birdway

    - match: '(\bstruct\b\s*)([A-Za-z0-9_]+)(\s*\()'
      captures:
        1: keyword.declaration.struct.birdway
        2: entity.name.struct.birdway

    - match: '(\benum\b\s*)([A-Za-z0-9_]+)(\s*\()'
      captures:
        1: keyword.declaration.enum.birdway
        2: entity.name.enum.birdway

    - match: '\bstruct\b\s*[A-Za-z0-9_]+'
      scope: storage.type.struct.birdway

    - match: '\benum\b\s*[A-Za-z0-9_]+'
      scope: storage.type.struct.birdway

    - match: (\blet\b\s*)([A-Za-z0-9_]+)(\s*=)
      captures:
        1: keyword.declaration.birdway
        3: keyword.declaration.birdway

    - match: \bprintln\b
      scope: keyword.other.birdway

    - match: '(\bfunc\b\s*)([A-Za-z0-9_]+)'
      captures:
        1: keyword.declaration.function.birdway
        2: entity.name.function.birdway

    - match: ->
      scope: keyword.declaration.birdway

    - match: (&&|&|~|##|#|-|\||\^|\+|==|=|%|\*|<<|<=|<|>>|>=|>|\?|//|/|!=|!)
      scope: keyword.operator.birdway

    - match: \.\.
      scope: keyword.other.birdway

    - match: '\b(-)?[0-9]+(\.[0-9]+)?\b'
      scope: constant.numeric.birdway

    - match: ;
      scope: punctuation.terminator.birdway

    - match: ','
      scope: punctuation.separator.sequence.birdway

    - match: ':'
      scope: punctuation.separator.key-value.birdway

    - match: \bstr\b
      scope: storage.type.birdway

    - match: \(
      push: main

    - match: \)
      pop: true

    - match: '([A-Za-z0-9_]+)(\s*)(\()'
      captures:
        1: variable.function.birdway
        2: text.birdway
        3: punctuation.section.parens.begin.birdway

  single_quoted_string:
    - meta_scope: string.quoted.single.birdway
    - match: '\\(n|r|e|t)'
      scope: constant.character.escape.birdway
    - match: '\\.'
      scope: invalid.illegal.birdway
    - match: "'"
      scope: punctuation.definition.string.end.birdway
      pop: true

  line_comment:
    - meta_scope: comment.line.birdway
    - match: $
      pop: true

  block_comment:
    - meta_scope: comment.line.birdway
    - match: \*/
      scope: punctuation.definition.comment.end.birdway
      pop: true

  double_quoted_string:
    - match: '\\(n|r|e|t)'
      scope: constant.character.escape.birdway
    - match: '\\.'
      scope: invalid.illegal.birdway
    - match: '"'
      scope: punctuation.definition.string.end.birdway
      pop: true
    - match: (\$)([A-Za-z0-9_]+)
      captures:
        1: punctuation.definition.string.birdway
        2: variable.birdway
    - match: \$\(
      scope: punctuation.definition.string.birdway
      push: main
      with_prototype:
        - match: \)
          pop: true
          scope: punctuation.definition.string.birdway
    - match: .
      scope: string.quoted.double.birdway
