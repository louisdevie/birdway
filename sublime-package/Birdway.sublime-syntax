%YAML 1.2
---
file_extensions:
  - bw
scope: source.birdway
contexts:
  main:
    - match: '"'
      scope: punctuation.definition.string.begin.birdway
      push: string

    - match: '---'
      scope: punctuation.definition.comment.begin.birdway
      push: block_comment

    - match: '--'
      scope: punctuation.definition.comment.birdway
      push: line_comment

    - match: \b(READ|TEXT|ERROR|ERR_IO|FAIL)\b
      scope: support.constant.birdway

    - match: '\b(if|else|then|switch|case|default)\b'
      scope: keyword.control.conditional.birdway

    - match: '\b(for|while|in|do)\b'
      scope: keyword.control.loop.birdway

    - match: '\b(break|continue)\b'
      scope: keyword.control.flow.break.birdway

    - match: '\b(meta|params|option|use)\b'
      scope: keyword.other.birdway

    - match: '\b(throw|try|on)\b'
      scope: keyword.control.exception.birdway

    - match: '(\bstruct\b\s*)([A-Za-z0-9_]+)'
      captures:
        1: keyword.declaration.struct.birdway
        2: entity.name.struct.birdway

    - match: '(\benum\b\s*)([A-Za-z0-9_]+)'
      captures:
        1: keyword.declaration.enum.birdway
        2: entity.name.enum.birdway

    - match: '\bStruct\b\s*[A-Za-z0-9_]+'
      scope: storage.type.struct.birdway

    - match: '\bEnum\b\s*[A-Za-z0-9_]+'
      scope: storage.type.enum.birdway

    - match: (\b(let|const)\b)(\s*)(\$)?
      captures:
        1: keyword.declaration.birdway
        4: storage.modifier.birdway

    - match: \b(print|println|read|to|from)\b
      scope: keyword.other.birdway

    - match: '(\bfunc\b\s*)(\b(main|exit)\b)'
      captures:
        1: keyword.declaration.function.birdway
        2: support.function.birdway

    - match: '(\bfunc\b\s*)((::)([A-Za-z0-9_]+)\s*)?([A-Za-z0-9_]+)'
      captures:
        1: keyword.declaration.function.birdway
        3: punctuation.accessor.double-colon.birdway
        4: variable.function.birdway
        5: entity.name.function.birdway

    - match: '\bfunc\b'
      scope: keyword.declaration.function.birdway

    - match: ->
      scope: keyword.declaration.birdway

    - match: '\breturn\b'
      scope: keyword.control.flow.return.birdway

    - match: (&&|&|~|##|#|-|\||\^|\+|==|=|%|\*|<<|<=|<|>>|>=|>|\?|//|/|!=|!)
      scope: keyword.operator.birdway

    - match: \.\.
      scope: keyword.other.birdway

    - match: '\b(-)?[0-9]+(\.[0-9]+)?\b'
      scope: constant.numeric.birdway

    - match: '\b(TRUE|FALSE)\b'
      scope: constant.language.boolean.birdway

    - match: '\bNULL\b'
      scope: constant.language.null.birdway

    - match: \b(indent|open|close|err)\b
      scope: support.function.birdway

    - match: ;
      scope: punctuation.terminator.birdway

    - match: ','
      scope: punctuation.separator.sequence.birdway

    - match: ':'
      scope: punctuation.separator.key-value.birdway

    - match: \b(Void|Int|Byte|Float|Str|Bool|File|RegEx)\b
      scope: storage.type.birdway

    - match: '{\*'
      scope: punctuation.section.birdway
      push: C.sublime-syntax
      with_prototype:
        - match: '\*}'
          pop: true

    - match: \(
      push: main

    - match: \)
      pop: true

    - match: '([A-Za-z0-9_]+)(\s*)(\()'
      captures:
        1: variable.function.birdway
        3: punctuation.section.parens.begin.birdway
      push: main

  line_comment:
    - meta_scope: comment.line.birdway
    - match: $
      pop: true

  block_comment:
    - meta_scope: comment.block.birdway
    - match: ---
      scope: punctuation.definition.comment.end.birdway
      pop: true

  string:
    - match: '\\(n|r|e|t|\\|")'
      scope: constant.character.escape.birdway

    - match: '\\.'
      scope: invalid.illegal.birdway

    - match: '"'
      scope: punctuation.definition.string.end.birdway
      pop: true

    - match: (\$)(\w+?\b)
      captures:
        1: punctuation.definition.string.birdway
        2: variable.birdway

    - match: (\$)(\()
      captures:
        1: punctuation.definition.string.birdway
      push: main

    - match: .
      scope: string.quoted.double.birdway
