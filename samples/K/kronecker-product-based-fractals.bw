---
  Kronecker product based fractals

  https://rosettacode.org/wiki/Kronecker_product_based_fractals

  This task is based on    Kronecker product   of two matrices.
  If your language has no a built-in function for such product then you need to implement it first.
  The essence of fractals is self-replication (at least, self-similar replications).
  So, using   n   times self-product of the matrix   (filled with 0/1)   we will have a fractal of the   nth   order.
  Actually, "self-product" is a Kronecker power of the matrix.
  In other words: for a matrix   M   and a power   n   create a function like   matkronpow(M, n),
which returns   MxMxMx...   (n   times product).
  A formal recurrent algorithm of creating Kronecker power of a matrix is the following:
  
  Algorithm
  Even just looking at the resultant matrix you can see what will be plotted.
There are virtually infinitely many fractals of this type. You are limited only by your creativity and
the power of your computer.
  
  Task
  Using  Kronecker product implement and show two popular and well-known fractals, i.e.:
  The last one ( Sierpinski carpet) is already here on RC, but built using different approaches.
  
  Test cases
  These 2 fractals (each order/power 4 at least) should be built using the following 2 simple matrices:
  Note
  See implementations and results below in JavaScript, PARI/GP and R languages. They have additional samples of "H", "+" and checkerboard fractals.
---
