---
  Roman numerals/Decode

  https://rosettacode.org/wiki/Roman_numerals/Decode

  === Task ===
  Create a function that takes a Roman numeral as its argument and returns its value as a numeric decimal integer.
  You don't need to validate the form of the Roman numeral.
  Modern Roman numerals are written by expressing each decimal digit of the number to be encoded separately,
  starting with the leftmost decimal digit and skipping any 0s (zeroes).
  1990 is rendered as MCMXC (1000 = M, 900 = CM, 90 = XC) and
  2008 is rendered as MMVIII (2000 = MM, 8 = VIII).
  The Roman numeral for 1666, MDCLXVI, uses each letter in descending order.
---

param n: Str ("A roman numeral");

func main() -> println from_roman(n);

func from_roman(n) -> {
    const ROMAN_DIGITS = [
        "I": 1,
        "V": 5,
        "X": 10,
        "L": 50,
        "C": 100,
        "D": 500,
        "M": 1000,
    ];

    let $prec = 0;

    let values = for digit in reverse(n) do {
        let abs = ROMAN_DIGITS[digit];
        -- if a digit is less than the precedent, it is subtracted
        let value = if abs >= prec then abs else -abs;
        prec = abs;

        value
    };

    sum(values);
};

func from_roman_no_mut(n) -> {
    const ROMAN_DIGITS = [
        "I": 1,
        "V": 5,
        "X": 10,
        "L": 50,
        "C": 100,
        "D": 500,
        "M": 1000,
    ];

    let abs = n::split()::map(digit -> ROMAN_DIGITS[digit]);

    zip_max(abs, abs[1..], 0)
        ::map((digit, next) -> if digit >= next then digit else -digit)
        ::sum()
};