---
  Subleq

  https://rosettacode.org/wiki/Subleq

  Subleq is an example of a One-Instruction Set Computer (OISC).
  It is named after its only instruction, which is SUbtract and Branch if Less than or EQual to zero.
  Task
  Your task is to create an interpreter which emulates a SUBLEQ machine.
  The machine's memory consists of an array of signed integers.   These integers may be interpreted in three ways:
  simple numeric values 
   memory addresses 
   characters for input or output
  Any reasonable word size that accommodates all three of the above uses is fine.
  The program should load the initial contents of the emulated machine's memory, set the instruction pointer to the first address (which is defined to be address 0), and begin emulating the machine, which works as follows:
  Let A be the value in the memory location identified by the instruction pointer;   let B and C be the values stored in the next two consecutive addresses in memory.
   Advance the instruction pointer three words, to point at the address after the address containing C.
   If A is   -1   (negative unity),   then a character is read from the machine's input and its numeric value stored in the address given by B.   C is unused.
   If B is   -1   (negative unity),   then the number contained in the address given by A is interpreted as a character and written to the machine's output.   C is unused.
   Otherwise, both A and B are treated as addresses.   The number contained in address A is subtracted from the number in address B (and the difference left in address B).   If the result is positive, execution continues uninterrupted; if the result is zero or negative, the number in C becomes the new instruction pointer.
   If the instruction pointer becomes negative, execution halts.
  Your solution may initialize the emulated machine's memory in any convenient manner, but if you accept it as input, it should be a separate input stream from the one fed to the emulated machine once it is running. And if fed as text input, it should be in the form of raw subleq "machine code" - whitespace-separated decimal numbers, with no symbolic names or other assembly-level extensions, to be loaded into memory starting at address   0   (zero).
  For purposes of this task, show the output of your solution when fed the below   "Hello, world!"   program.
  As written, this example assumes ASCII or a superset of it, such as any of the Latin-N character sets or Unicode;   you may translate the numbers representing characters (starting with 72=ASCII 'H') into another character set if your implementation runs in a non-ASCII-compatible environment. If 0 is not an appropriate terminator in your character set, the program logic will need some adjustment as well.
  The above "machine code" corresponds to something like this in a hypothetical assembler language for a signed 8-bit version of the machine:
  
---
