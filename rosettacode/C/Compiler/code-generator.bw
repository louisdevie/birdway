---
  Compiler/code generator

  https://rosettacode.org/wiki/Compiler/code_generator

  A code generator translates the output of the syntax analyzer and/or semantic analyzer
into lower level code, either assembly, object, or virtual.
  Take the output of the Syntax analyzer task - which is a flattened Abstract Syntax Tree (AST) - and convert it to virtual machine code, that can be run by the
Virtual machine interpreter. The output is in text format, and represents virtual assembly code.
  The program should read input from a file and/or stdin, and write output to a file and/or
stdout.
  Example - given the simple program (below), stored in a file called while.t, create the list of tokens, using one of the Lexical analyzer solutions
  Run one of the Syntax analyzer solutions
  while.ast can be input into the code generator.
  The following table shows the input to lex, lex output, the AST produced by the parser, and the generated virtual assembly code.
  Input format
  As shown in the table, above, the output from the syntax analyzer is a flattened AST.
  In the AST, Identifier, Integer, and String, are terminal nodes, e.g, they do not have child nodes.
  Loading this data into an internal parse tree should be as simple as:
  Output format - refer to the table above
  Registers
  Data
  32-bit integers and strings
  Instructions
  Each instruction is one byte. The following instructions also have a 32-bit integer operand:
  where index is an index into the data array.
  where index is an index into the data array.
  where value is a 32-bit integer that will be pushed onto the stack.
  where (n) is a 32-bit integer specifying the distance between the current location and the
desired location. addr is an unsigned value of the actual code address.
  where (n) is a 32-bit integer specifying the distance between the current location and the
desired location. addr is an unsigned value of the actual code address.
  The following instructions do not have an operand. They perform their operation directly
against the stack:
  For the following instructions, the operation is performed against the top two entries in
the stack:
  For the following instructions, the operation is performed against the top entry in the
stack:
  Print the word at stack top as a character.
  Print the word at stack top as an integer.
  Stack top points to an index into the string pool. Print that entry.
  Unconditional stop.
  Additional examples
  Your solution should pass all the test cases above and the additional tests found Here.
  The C and Python versions can be considered reference implementations.
  Related Tasks
---
