---
  Universal Turing machine

  https://rosettacode.org/wiki/Universal_Turing_machine

  One of the foundational mathematical constructs behind computer science
is the universal Turing Machine.
  (Alan Turing introduced the idea of such a machine in 1936â€“1937.)
  Indeed one way to definitively prove that a language
is turing-complete
is to implement a universal Turing machine in it.
  
  Task
  Simulate such a machine capable
of taking the definition of any other Turing machine and executing it.
  Of course, you will not have an infinite tape,
but you should emulate this as much as is possible.
  The three permissible actions on the tape are "left", "right" and "stay".
  To test your universal Turing machine (and prove your programming language
is Turing complete!), you should execute the following two Turing machines
based on the following definitions.
  Simple incrementer
  The input for this machine should be a tape of 1 1 1
  Three-state busy beaver
  The input for this machine should be an empty tape.
  Bonus:
  5-state, 2-symbol probable Busy Beaver machine from Wikipedia
  The input for this machine should be an empty tape.
  This machine runs for more than 47 millions steps.
---
