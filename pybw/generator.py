def transpile(ast, **kwargs):
    code = "/*=== GENERATED BY BIRDWAY VERSION PYA-226DF ===*/\n#include <stdio.h>\n#include <stdbool.h>"
    code += generate_string_constants(ast, kwargs)
    code += features(ast, kwargs)
    code += generate_argument_parser(ast, kwargs)
    code += transpile_script(ast, kwargs)
    code += generate_main_function(ast, kwargs)
    return code


def generate_string_constants(ast, kwargs):
    return f"""
        char EMPTY[] = "";
        const char BIRDWAY_APPLICATION_IDENTIFICATION[] = "{kwargs.get("name", "[unnamed]")}";"""


def generate_main_function(ast, kwargs):
    return f"""
        int main(int argc, char **argv)
        {{
            void *args[{
                len(ast.arguments.statements)
            }] = {{{
                ", ".join(["NULL"]*len(ast.arguments.statements))
            }}};
            int parsingResult = birdwayParseAllArguments(argc, argv, args);
            if (parsingResult)
            {{
                return parsingResult;
            }}
            else
            {{
                return birdwayMain(args);
            }}
        }}"""


def transpile_script(ast, kwargs):
    return f"""
        int birdwayMain(void **globals) 
        {{
            return 0;
        }}"""


def generate_argument_parser(ast, kwargs):
    return f"""
        int birdwayParseAllArguments(int argc, char **argv, void **output)
        {{
            bool isShort;
            char *name;
            char *value;
            int pos = 0;
            for (int i=1; i<argc; i++)
            {{
                if (birdwayParseOneArgument(argv[i], &pos, &isShort, &name, &value))
                {{
                    return 1;
                }}
                
                /*printf(isShort ? "yes" : "no");
                printf(" / ");
                printf(name);
                printf(" / ");
                printf(value);
                printf("\\n");*/

                {"".join([generate_argument_checker(arg) for arg in ast.arguments.statements])}
            }}
            return 0;
        }}"""


def features(ast, kwargs):
    base = f"""
        int birdwayParseOneArgument(char* arg, bool *isShort, char **name, char **value)
        {{
            *isShort = false;
            *name = EMPTY;
            *value = arg;
            return 0;
        }}"""

    return base


def generate_argument_checker(node):
    return ""
